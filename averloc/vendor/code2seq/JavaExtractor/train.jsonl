{"language": "java", "identifier": "assertTaskRunningState", "target_tokens": ["assert", "task", "running", "state"], "source_tokens": ["(", ")", "{", "assertEquals", "(", "TaskState", ".", "RUNNING", ",", "mockTask", ".", "getState", "(", ")", ")", ";", "}"], "elided_tokens": ["private", "void", "assertTaskRunningState"], "source_code": "class WRAPPER {\nprivate void assertTaskRunningState() {\n    assertEquals(TaskState.RUNNING, mockTask.getState());\n  }\n}\n", "sha256_hash": "f3c01bdfa46fbe61d8ecfcc9174f1816ed2e6514c1acc9fa972c990eae8051de", "split": "test", "from_file": ""}
{"language": "java", "identifier": "render", "target_tokens": ["render"], "source_tokens": ["(", "RenderingContext", "renderingContext", ")", "{", "return", "(", "getOperation", "(", ")", "==", "Operation", ".", "UNARY_MINUS", "?", "'-'", ":", "'+'", ")", "+", "(", "(", "Renderable", ")", "getOperand", "(", ")", ")", ".", "render", "(", "renderingContext", ")", ";", "}"], "elided_tokens": ["@", "Override", "public", "String", "render"], "source_code": "class WRAPPER {\n@Override\n\tpublic String render(RenderingContext renderingContext) {\n\t\treturn ( getOperation() == Operation.UNARY_MINUS ? '-' : '+' )\n\t\t\t\t+ ( (Renderable) getOperand() ).render( renderingContext );\n\t}\n}\n", "sha256_hash": "afc8e7c0734dd82ffdaf69774c272daffc5fb6e6357abcb0ec87626367b9c35b", "split": "train", "from_file": ""}
{"language": "java", "identifier": "countByUserId", "target_tokens": ["count", "by", "user", "id"], "source_tokens": ["(", "long", "userId", ")", "{", "FinderPath", "finderPath", "=", "FINDER_PATH_COUNT_BY_USERID", ";", "Object", "[", "]", "finderArgs", "=", "new", "Object", "[", "]", "{", "userId", "}", ";", "Long", "count", "=", "(", "Long", ")", "finderCache", ".", "getResult", "(", "finderPath", ",", "finderArgs", ",", "this", ")", ";", "if", "(", "count", "==", "null", ")", "{", "StringBundler", "query", "=", "new", "StringBundler", "(", "2", ")", ";", "query", ".", "append", "(", "_SQL_COUNT_ANNOUNCEMENTSENTRY_WHERE", ")", ";", "query", ".", "append", "(", "_FINDER_COLUMN_USERID_USERID_2", ")", ";", "String", "sql", "=", "query", ".", "toString", "(", ")", ";", "Session", "session", "=", "null", ";", "try", "{", "session", "=", "openSession", "(", ")", ";", "Query", "q", "=", "session", ".", "createQuery", "(", "sql", ")", ";", "QueryPos", "qPos", "=", "QueryPos", ".", "getInstance", "(", "q", ")", ";", "qPos", ".", "add", "(", "userId", ")", ";", "count", "=", "(", "Long", ")", "q", ".", "uniqueResult", "(", ")", ";", "finderCache", ".", "putResult", "(", "finderPath", ",", "finderArgs", ",", "count", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "finderCache", ".", "removeResult", "(", "finderPath", ",", "finderArgs", ")", ";", "throw", "processException", "(", "e", ")", ";", "}", "finally", "{", "closeSession", "(", "session", ")", ";", "}", "}", "return", "count", ".", "intValue", "(", ")", ";", "}"], "elided_tokens": ["@", "Override", "public", "int", "countByUserId"], "source_code": "class WRAPPER {\n@Override\n\tpublic int countByUserId(long userId) {\n\t\tFinderPath finderPath = FINDER_PATH_COUNT_BY_USERID;\n\n\t\tObject[] finderArgs = new Object[] { userId };\n\n\t\tLong count = (Long)finderCache.getResult(finderPath, finderArgs, this);\n\n\t\tif (count == null) {\n\t\t\tStringBundler query = new StringBundler(2);\n\n\t\t\tquery.append(_SQL_COUNT_ANNOUNCEMENTSENTRY_WHERE);\n\n\t\t\tquery.append(_FINDER_COLUMN_USERID_USERID_2);\n\n\t\t\tString sql = query.toString();\n\n\t\t\tSession session = null;\n\n\t\t\ttry {\n\t\t\t\tsession = openSession();\n\n\t\t\t\tQuery q = session.createQuery(sql);\n\n\t\t\t\tQueryPos qPos = QueryPos.getInstance(q);\n\n\t\t\t\tqPos.add(userId);\n\n\t\t\t\tcount = (Long)q.uniqueResult();\n\n\t\t\t\tfinderCache.putResult(finderPath, finderArgs, count);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tfinderCache.removeResult(finderPath, finderArgs);\n\n\t\t\t\tthrow processException(e);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tcloseSession(session);\n\t\t\t}\n\t\t}\n\n\t\treturn count.intValue();\n\t}\n}\n", "sha256_hash": "17119e74b56fdd62d523b1af9010dc0e0fd6f8b7e592bb09aef2ba26316824f9", "split": "train", "from_file": ""}
