{"language": "java", "identifier": "getMappedColumnNames", "target_tokens": ["get", "mapped", "column", "names"], "source_tokens": ["(", "String", "minColumn", ",", "String", "maxColumn", ")", "{", "ImmutableList", ".", "Builder", "<", "String", ">", "builder", "=", "ImmutableList", ".", "builder", "(", ")", ";", "for", "(", "String", "column", ":", "columnNames", ")", "{", "switch", "(", "column", ")", "{", "case", "MIN_TIMESTAMP", ":", "builder", ".", "add", "(", "minColumn", ")", ";", "break", ";", "case", "MAX_TIMESTAMP", ":", "builder", ".", "add", "(", "maxColumn", ")", ";", "break", ";", "default", ":", "builder", ".", "add", "(", "column", ")", ";", "break", ";", "}", "}", "return", "builder", ".", "build", "(", ")", ";", "}"], "elided_tokens": ["private", "List", "<", "String", ">", "getMappedColumnNames"], "source_code": "class WRAPPER {\nprivate List<String> getMappedColumnNames(String minColumn, String maxColumn)\n    {\n        ImmutableList.Builder<String> builder = ImmutableList.builder();\n        for (String column : columnNames) {\n            switch (column) {\n                case MIN_TIMESTAMP:\n                    builder.add(minColumn);\n                    break;\n                case MAX_TIMESTAMP:\n                    builder.add(maxColumn);\n                    break;\n                default:\n                    builder.add(column);\n                    break;\n            }\n        }\n        return builder.build();\n    }\n}\n", "sha256_hash": "95121f9c1028e738245937a307dd9498a3ad3246a02d21ca4d246ed63aa613a2", "split": "train", "from_file": ""}{"language": "java", "identifier": "setCode", "target_tokens": ["set", "code"], "source_tokens": ["(", "String", "code", ")", "{", "this", ".", "code", "=", "code", ";", "}"], "elided_tokens": ["public", "void", "setCode"], "source_code": "class WRAPPER {\npublic void setCode(String code) {\n        this.code = code;\n    }\n}\n", "sha256_hash": "473efe57cd23f4978419b8e71e68ac0df3c2f69436a8bbd1eac77c073a779369", "split": "train", "from_file": ""}
{"language": "java", "identifier": "getClassName", "target_tokens": ["get", "class", "name"], "source_tokens": ["(", "T", "classedModel", ")", "{", "return", "classedModel", ".", "getModelClassName", "(", ")", ";", "}"], "elided_tokens": ["protected", "String", "getClassName"], "source_code": "class WRAPPER {\nprotected String getClassName(T classedModel) {\n\t\treturn classedModel.getModelClassName();\n\t}\n}\n", "sha256_hash": "a030438b13ce6cb49119f2a16eed2bb1180ee4e4256b4b5511b4b22155370a9b", "split": "train", "from_file": ""}
{"language": "java", "identifier": "findByCompanyId", "target_tokens": ["find", "by", "company", "id"], "source_tokens": ["(", "long", "companyId", ",", "int", "start", ",", "int", "end", ",", "OrderByComparator", "<", "Address", ">", "orderByComparator", ",", "boolean", "retrieveFromCache", ")", "{", "boolean", "pagination", "=", "true", ";", "FinderPath", "finderPath", "=", "null", ";", "Object", "[", "]", "finderArgs", "=", "null", ";", "if", "(", "(", "start", "==", "QueryUtil", ".", "ALL_POS", ")", "&&", "(", "end", "==", "QueryUtil", ".", "ALL_POS", ")", "&&", "(", "orderByComparator", "==", "null", ")", ")", "{", "pagination", "=", "false", ";", "finderPath", "=", "FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_COMPANYID", ";", "finderArgs", "=", "new", "Object", "[", "]", "{", "companyId", "}", ";", "}", "else", "{", "finderPath", "=", "FINDER_PATH_WITH_PAGINATION_FIND_BY_COMPANYID", ";", "finderArgs", "=", "new", "Object", "[", "]", "{", "companyId", ",", "start", ",", "end", ",", "orderByComparator", "}", ";", "}", "List", "<", "Address", ">", "list", "=", "null", ";", "if", "(", "retrieveFromCache", ")", "{", "list", "=", "(", "List", "<", "Address", ">", ")", "finderCache", ".", "getResult", "(", "finderPath", ",", "finderArgs", ",", "this", ")", ";", "if", "(", "(", "list", "!=", "null", ")", "&&", "!", "list", ".", "isEmpty", "(", ")", ")", "{", "for", "(", "Address", "address", ":", "list", ")", "{", "if", "(", "(", "companyId", "!=", "address", ".", "getCompanyId", "(", ")", ")", ")", "{", "list", "=", "null", ";", "break", ";", "}", "}", "}", "}", "if", "(", "list", "==", "null", ")", "{", "StringBundler", "query", "=", "null", ";", "if", "(", "orderByComparator", "!=", "null", ")", "{", "query", "=", "new", "StringBundler", "(", "3", "+", "(", "orderByComparator", ".", "getOrderByFields", "(", ")", ".", "length", "*", "3", ")", ")", ";", "}", "else", "{", "query", "=", "new", "StringBundler", "(", "3", ")", ";", "}", "query", ".", "append", "(", "_SQL_SELECT_ADDRESS_WHERE", ")", ";", "query", ".", "append", "(", "_FINDER_COLUMN_COMPANYID_COMPANYID_2", ")", ";", "if", "(", "orderByComparator", "!=", "null", ")", "{", "appendOrderByComparator", "(", "query", ",", "_ORDER_BY_ENTITY_ALIAS", ",", "orderByComparator", ")", ";", "}", "else", "if", "(", "pagination", ")", "{", "query", ".", "append", "(", "AddressModelImpl", ".", "ORDER_BY_JPQL", ")", ";", "}", "String", "sql", "=", "query", ".", "toString", "(", ")", ";", "Session", "session", "=", "null", ";", "try", "{", "session", "=", "openSession", "(", ")", ";", "Query", "q", "=", "session", ".", "createQuery", "(", "sql", ")", ";", "QueryPos", "qPos", "=", "QueryPos", ".", "getInstance", "(", "q", ")", ";", "qPos", ".", "add", "(", "companyId", ")", ";", "if", "(", "!", "pagination", ")", "{", "list", "=", "(", "List", "<", "Address", ">", ")", "QueryUtil", ".", "list", "(", "q", ",", "getDialect", "(", ")", ",", "start", ",", "end", ",", "false", ")", ";", "Collections", ".", "sort", "(", "list", ")", ";", "list", "=", "Collections", ".", "unmodifiableList", "(", "list", ")", ";", "}", "else", "{", "list", "=", "(", "List", "<", "Address", ">", ")", "QueryUtil", ".", "list", "(", "q", ",", "getDialect", "(", ")", ",", "start", ",", "end", ")", ";", "}", "cacheResult", "(", "list", ")", ";", "finderCache", ".", "putResult", "(", "finderPath", ",", "finderArgs", ",", "list", ")", ";", "}", "catch", "(", "Exception", "e", ")", "{", "finderCache", ".", "removeResult", "(", "finderPath", ",", "finderArgs", ")", ";", "throw", "processException", "(", "e", ")", ";", "}", "finally", "{", "closeSession", "(", "session", ")", ";", "}", "}", "return", "list", ";", "}"], "elided_tokens": ["@", "Override", "public", "List", "<", "Address", ">", "findByCompanyId"], "source_code": "class WRAPPER {\n@Override\n\tpublic List<Address> findByCompanyId(long companyId, int start, int end,\n\t\tOrderByComparator<Address> orderByComparator, boolean retrieveFromCache) {\n\t\tboolean pagination = true;\n\t\tFinderPath finderPath = null;\n\t\tObject[] finderArgs = null;\n\n\t\tif ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) &&\n\t\t\t\t(orderByComparator == null)) {\n\t\t\tpagination = false;\n\t\t\tfinderPath = FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_COMPANYID;\n\t\t\tfinderArgs = new Object[] { companyId };\n\t\t}\n\t\telse {\n\t\t\tfinderPath = FINDER_PATH_WITH_PAGINATION_FIND_BY_COMPANYID;\n\t\t\tfinderArgs = new Object[] { companyId, start, end, orderByComparator };\n\t\t}\n\n\t\tList<Address> list = null;\n\n\t\tif (retrieveFromCache) {\n\t\t\tlist = (List<Address>)finderCache.getResult(finderPath, finderArgs,\n\t\t\t\t\tthis);\n\n\t\t\tif ((list != null) && !list.isEmpty()) {\n\t\t\t\tfor (Address address : list) {\n\t\t\t\t\tif ((companyId != address.getCompanyId())) {\n\t\t\t\t\t\tlist = null;\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (list == null) {\n\t\t\tStringBundler query = null;\n\n\t\t\tif (orderByComparator != null) {\n\t\t\t\tquery = new StringBundler(3 +\n\t\t\t\t\t\t(orderByComparator.getOrderByFields().length * 3));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tquery = new StringBundler(3);\n\t\t\t}\n\n\t\t\tquery.append(_SQL_SELECT_ADDRESS_WHERE);\n\n\t\t\tquery.append(_FINDER_COLUMN_COMPANYID_COMPANYID_2);\n\n\t\t\tif (orderByComparator != null) {\n\t\t\t\tappendOrderByComparator(query, _ORDER_BY_ENTITY_ALIAS,\n\t\t\t\t\torderByComparator);\n\t\t\t}\n\t\t\telse\n\t\t\t if (pagination) {\n\t\t\t\tquery.append(AddressModelImpl.ORDER_BY_JPQL);\n\t\t\t}\n\n\t\t\tString sql = query.toString();\n\n\t\t\tSession session = null;\n\n\t\t\ttry {\n\t\t\t\tsession = openSession();\n\n\t\t\t\tQuery q = session.createQuery(sql);\n\n\t\t\t\tQueryPos qPos = QueryPos.getInstance(q);\n\n\t\t\t\tqPos.add(companyId);\n\n\t\t\t\tif (!pagination) {\n\t\t\t\t\tlist = (List<Address>)QueryUtil.list(q, getDialect(),\n\t\t\t\t\t\t\tstart, end, false);\n\n\t\t\t\t\tCollections.sort(list);\n\n\t\t\t\t\tlist = Collections.unmodifiableList(list);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlist = (List<Address>)QueryUtil.list(q, getDialect(),\n\t\t\t\t\t\t\tstart, end);\n\t\t\t\t}\n\n\t\t\t\tcacheResult(list);\n\n\t\t\t\tfinderCache.putResult(finderPath, finderArgs, list);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tfinderCache.removeResult(finderPath, finderArgs);\n\n\t\t\t\tthrow processException(e);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tcloseSession(session);\n\t\t\t}\n\t\t}\n\n\t\treturn list;\n\t}\n}\n", "sha256_hash": "d2aa316ca6d043a1bcdd44fd66b9dc136f4a37b09dab79b8b4df427c966e40c8", "split": "train", "from_file": ""}
